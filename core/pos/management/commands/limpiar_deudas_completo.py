from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils import timezone
from django.db.models import Q, F, Sum
from pos.models import Cliente, Credito, CreditoAbono
import json
import os
from datetime import datetime
from decimal import Decimal


class Command(BaseCommand):
    help = 'Script completo para limpiar deudas de clientes y restablecer cr√©ditos'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--modo',
            type=str,
            choices=['todo', 'cliente', 'reporte', 'verificar'],
            default='todo',
            help='Modo de operaci√≥n: todo, cliente espec√≠fico, reporte o verificar'
        )
        parser.add_argument(
            '--cliente-id',
            type=int,
            help='ID del cliente espec√≠fico a limpiar (solo para modo=cliente)'
        )
        parser.add_argument(
            '--confirmar',
            action='store_true',
            help='Confirma que deseas ejecutar la operaci√≥n'
        )
        parser.add_argument(
            '--backup-path',
            type=str,
            help='Ruta personalizada para el backup',
            default=None
        )
        parser.add_argument(
            '--sin-backup',
            action='store_true',
            help='Omite crear backup (NO RECOMENDADO para --modo=todo)'
        )
        parser.add_argument(
            '--forzar',
            action='store_true',
            help='Omite confirmaciones interactivas (usar con precauci√≥n)'
        )
    
    def handle(self, *args, **options):
        """Punto de entrada principal del comando"""
        
        # Mostrar banner
        self.mostrar_banner()
        
        # Validar argumentos
        if not self.validar_argumentos(options):
            return
        
        # Ejecutar seg√∫n el modo
        modo = options['modo']
        
        if modo == 'reporte':
            self.generar_reporte()
        elif modo == 'verificar':
            self.verificar_integridad()
        elif modo == 'cliente':
            self.limpiar_cliente_especifico(options)
        elif modo == 'todo':
            self.limpiar_todas_las_deudas(options)
    
    def mostrar_banner(self):
        """Muestra el banner del script"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üßπ LIMPIEZA DE DEUDAS                     ‚ïë
‚ïë              Sistema POS - Gesti√≥n de Cr√©ditos              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        self.stdout.write(self.style.HTTP_INFO(banner))
    
    def validar_argumentos(self, options):
        """Valida los argumentos del comando"""
        
        if options['modo'] == 'cliente' and not options['cliente_id']:
            self.stdout.write(
                self.style.ERROR(
                    "‚ùå Error: Para modo 'cliente' debes especificar --cliente-id"
                )
            )
            return False
        
        if options['modo'] == 'todo' and not options['sin_backup'] and not options['confirmar']:
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è  Para limpiar TODAS las deudas necesitas usar --confirmar"
                )
            )
            return False
        
        return True
    
    def generar_reporte(self):
        """Genera un reporte completo del estado de cr√©ditos"""
        
        self.stdout.write(self.style.HTTP_INFO("\nüìä REPORTE COMPLETO DE CR√âDITOS"))
        self.stdout.write("=" * 60)
        
        # Estad√≠sticas generales
        total_clientes = Cliente.objects.count()
        total_creditos = Credito.objects.count()
        total_abonos = CreditoAbono.objects.count()
        
        # Cr√©ditos por estado
        creditos_pendientes = Credito.objects.filter(estado='Pendiente').count()
        creditos_pagados = Credito.objects.filter(estado='Pagado').count()
        creditos_vencidos = Credito.objects.filter(estado='Vencido').count()
        
        # Montos totales
        deuda_total = Credito.objects.filter(estado='Pendiente').aggregate(
            total=Sum('monto_credito'))['total'] or 0
        abonos_total = CreditoAbono.objects.aggregate(
            total=Sum('monto'))['total'] or 0
        
        self.stdout.write(f"\nüè¢ ESTAD√çSTICAS GENERALES:")
        self.stdout.write(f"   ‚Ä¢ Total de clientes: {total_clientes}")
        self.stdout.write(f"   ‚Ä¢ Total de cr√©ditos: {total_creditos}")
        self.stdout.write(f"   ‚Ä¢ Total de abonos: {total_abonos}")
        
        self.stdout.write(f"\nüí≥ CR√âDITOS POR ESTADO:")
        self.stdout.write(f"   ‚Ä¢ Pendientes: {creditos_pendientes}")
        self.stdout.write(f"   ‚Ä¢ Pagados: {creditos_pagados}")
        self.stdout.write(f"   ‚Ä¢ Vencidos: {creditos_vencidos}")
        
        self.stdout.write(f"\nüí∞ MONTOS:")
        self.stdout.write(f"   ‚Ä¢ Deuda total pendiente: ${deuda_total:.2f}")
        self.stdout.write(f"   ‚Ä¢ Total abonado: ${abonos_total:.2f}")
        
        # Clientes con mayor deuda
        self.stdout.write(f"\nüë• TOP 10 CLIENTES CON MAYOR DEUDA:")
        clientes_con_deuda = []
        
        for cliente in Cliente.objects.all():
            creditos = Credito.objects.filter(cliente_id=cliente.cedula, estado='Pendiente')
            deuda_cliente = sum(credito.monto_credito - credito.abonado for credito in creditos)
            if deuda_cliente > 0:
                clientes_con_deuda.append((cliente, deuda_cliente))
        
        clientes_con_deuda.sort(key=lambda x: x[1], reverse=True)
        
        for i, (cliente, deuda) in enumerate(clientes_con_deuda[:10]):
            self.stdout.write(f"   {i+1:2d}. {cliente.nombre} (#{cliente.cedula}) - ${deuda:.2f}")
        
        # An√°lisis de cr√©ditos m√°ximos vs disponibles
        self.stdout.write(f"\nüîç AN√ÅLISIS DE CR√âDITOS:")
        clientes_credito_maximo = Cliente.objects.filter(credito=F('credito_maximo')).count()
        clientes_sin_credito = Cliente.objects.filter(credito=0).count()
        
        self.stdout.write(f"   ‚Ä¢ Clientes con cr√©dito m√°ximo: {clientes_credito_maximo}")
        self.stdout.write(f"   ‚Ä¢ Clientes sin cr√©dito disponible: {clientes_sin_credito}")
        
        self.stdout.write("\n" + "=" * 60)
        self.stdout.write(self.style.SUCCESS("‚úÖ Reporte completado"))
    
    def verificar_integridad(self):
        """Verifica la integridad de los datos de cr√©ditos"""
        
        self.stdout.write(self.style.HTTP_INFO("\nüîç VERIFICACI√ìN DE INTEGRIDAD"))
        self.stdout.write("=" * 50)
        
        errores = []
        
        # 1. Verificar cr√©ditos hu√©rfanos (sin cliente)
        creditos_huerfanos = Credito.objects.filter(
            Q(cliente_id__isnull=True) | Q(cliente_id='')
        ).count()
        if creditos_huerfanos > 0:
            errores.append(f"‚ùå {creditos_huerfanos} cr√©ditos sin cliente asociado")
        
        # 2. Verificar abonos hu√©rfanos (sin cr√©dito)
        abonos_huerfanos = CreditoAbono.objects.filter(
            credito_id__isnull=True
        ).count()
        if abonos_huerfanos > 0:
            errores.append(f"‚ùå {abonos_huerfanos} abonos sin cr√©dito asociado")
        
        # 3. Verificar cr√©ditos con montos negativos
        creditos_negativos = Credito.objects.filter(
            monto_credito__lt=0
        ).count()
        if creditos_negativos > 0:
            errores.append(f"‚ùå {creditos_negativos} cr√©ditos con monto negativo")
        
        # 4. Verificar clientes con cr√©dito mayor al m√°ximo
        clientes_exceso = Cliente.objects.filter(
            credito__gt=F('credito_maximo')
        ).count()
        if clientes_exceso > 0:
            errores.append(f"‚ùå {clientes_exceso} clientes con cr√©dito mayor al m√°ximo")
        
        # 5. Verificar abonos mayores al cr√©dito
        for credito in Credito.objects.all():
            if credito.abonado and credito.abonado > credito.monto_credito:
                errores.append(f"‚ùå Cr√©dito #{credito.id}: abonado (${credito.abonado}) > cr√©dito (${credito.monto_credito})")
        
        # Mostrar resultados
        if errores:
            self.stdout.write(f"\n‚ö†Ô∏è  PROBLEMAS ENCONTRADOS ({len(errores)}):")
            for error in errores:
                self.stdout.write(f"   {error}")
        else:
            self.stdout.write(self.style.SUCCESS("\n‚úÖ No se encontraron problemas de integridad"))
        
        self.stdout.write("\n" + "=" * 50)
    
    def limpiar_cliente_especifico(self, options):
        """Limpia las deudas de un cliente espec√≠fico"""
        
        cliente_id = options['cliente_id']
        
        try:
            cliente = Cliente.objects.get(id=cliente_id)
        except Cliente.DoesNotExist:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Cliente con ID {cliente_id} no encontrado")
            )
            return
        
        self.stdout.write(self.style.HTTP_INFO(f"\nüë§ LIMPIAR CLIENTE: {cliente.nombre}"))
        self.stdout.write("=" * 50)
        
        # Mostrar estado actual
        creditos = Credito.objects.filter(cliente_id=cliente.cedula)
        abonos = CreditoAbono.objects.filter(credito_id__in=creditos.values_list('id', flat=True))
        deuda_total = sum(credito.monto_credito - credito.abonado for credito in creditos if credito.estado == 'Pendiente')
        
        self.stdout.write(f"\nüìä ESTADO ACTUAL:")
        self.stdout.write(f"   ‚Ä¢ Nombre: {cliente.nombre}")
        self.stdout.write(f"   ‚Ä¢ C√©dula: {cliente.cedula}")
        self.stdout.write(f"   ‚Ä¢ Cr√©dito actual: ${cliente.credito}")
        self.stdout.write(f"   ‚Ä¢ Cr√©dito m√°ximo: ${cliente.credito_maximo}")
        self.stdout.write(f"   ‚Ä¢ Deuda total: ${deuda_total:.2f}")
        self.stdout.write(f"   ‚Ä¢ Cr√©ditos registrados: {creditos.count()}")
        self.stdout.write(f"   ‚Ä¢ Abonos registrados: {abonos.count()}")
        
        # Confirmaci√≥n
        if not options['forzar']:
            confirm = input(f"\n¬øLimpiar TODAS las deudas de {cliente.nombre}? (s/N): ")
            if confirm.lower() != 's':
                self.stdout.write(self.style.WARNING("‚ùå Operaci√≥n cancelada"))
                return
        
        # Ejecutar limpieza
        try:
            with transaction.atomic():
                # Eliminar abonos
                abonos_eliminados = abonos.delete()[0]
                
                # Eliminar cr√©ditos
                creditos_eliminados = creditos.delete()[0]
                
                # Restablecer cr√©dito
                cliente.credito = cliente.credito_maximo
                cliente.save()
                
                self.stdout.write(f"\n‚úÖ LIMPIEZA COMPLETADA:")
                self.stdout.write(f"   ‚Ä¢ Eliminados {creditos_eliminados} cr√©ditos")
                self.stdout.write(f"   ‚Ä¢ Eliminados {abonos_eliminados} abonos")
                self.stdout.write(f"   ‚Ä¢ Cr√©dito restablecido a ${cliente.credito_maximo}")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error durante la limpieza: {str(e)}"))
            raise
    
    def limpiar_todas_las_deudas(self, options):
        """Limpia TODAS las deudas del sistema"""
        
        if not options['confirmar']:
            self.stdout.write(
                self.style.WARNING(
                    "\n‚ö†Ô∏è  OPERACI√ìN CR√çTICA: Esta acci√≥n eliminar√° TODAS las deudas del sistema.\n"
                    "Para continuar, usa: --confirmar\n"
                    "Ejemplo: python manage.py limpiar_deudas_completo --modo=todo --confirmar"
                )
            )
            return
        
        self.stdout.write(self.style.ERROR("\nüö® LIMPIEZA TOTAL DEL SISTEMA"))
        self.stdout.write("=" * 60)
        
        # Estad√≠sticas iniciales
        clientes_count = Cliente.objects.count()
        creditos_count = Credito.objects.count()
        abonos_count = CreditoAbono.objects.count()
        deuda_total = Credito.objects.filter(estado='Pendiente').aggregate(
            total=Sum('monto_credito'))['total'] or 0
        
        self.stdout.write(f"\nüìä ESTADO ACTUAL:")
        self.stdout.write(f"   ‚Ä¢ Clientes: {clientes_count}")
        self.stdout.write(f"   ‚Ä¢ Cr√©ditos: {creditos_count}")
        self.stdout.write(f"   ‚Ä¢ Abonos: {abonos_count}")
        self.stdout.write(f"   ‚Ä¢ Deuda total: ${deuda_total:.2f}")
        
        # Crear backup autom√°tico
        if not options['sin_backup']:
            backup_path = options['backup_path'] or f"backup_deudas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            self.stdout.write(f"\nüíæ Creando backup en: {backup_path}")
            self.crear_backup_completo(backup_path)
        
        # Confirmaci√≥n final
        if not options['forzar']:
            self.stdout.write(self.style.ERROR(
                f"\nüö® √öLTIMA ADVERTENCIA:\n"
                f"   ‚Ä¢ Se eliminar√°n {creditos_count} cr√©ditos\n"
                f"   ‚Ä¢ Se eliminar√°n {abonos_count} abonos\n"
                f"   ‚Ä¢ Se perder√°n ${deuda_total:.2f} en deudas registradas\n"
                f"   ‚Ä¢ Se restablecer√°n {clientes_count} clientes a su cr√©dito m√°ximo"
            ))
            
            confirm = input("\n¬øCONFIRMAS que quieres ELIMINAR TODAS LAS DEUDAS? Escribe 'ELIMINAR TODO': ")
            if confirm != 'ELIMINAR TODO':
                self.stdout.write(self.style.WARNING("‚ùå Operaci√≥n cancelada por seguridad"))
                return
        
        # Ejecutar limpieza total
        self.stdout.write(self.style.HTTP_INFO("\nüßπ INICIANDO LIMPIEZA TOTAL..."))
        
        try:
            with transaction.atomic():
                # 1. Eliminar todos los abonos
                abonos_eliminados = CreditoAbono.objects.all().delete()[0]
                self.stdout.write(f"   ‚úÖ Eliminados {abonos_eliminados} abonos")
                
                # 2. Eliminar todos los cr√©ditos
                creditos_eliminados = Credito.objects.all().delete()[0]
                self.stdout.write(f"   ‚úÖ Eliminados {creditos_eliminados} cr√©ditos")
                
                # 3. Restablecer todos los clientes
                clientes_actualizados = 0
                for cliente in Cliente.objects.all():
                    if cliente.credito != cliente.credito_maximo:
                        cliente.credito = cliente.credito_maximo
                        cliente.save()
                        clientes_actualizados += 1
                
                self.stdout.write(f"   ‚úÖ Restablecidos {clientes_actualizados} clientes")
                
                # 4. Verificaci√≥n final
                self.stdout.write(f"\nüìä VERIFICACI√ìN FINAL:")
                self.stdout.write(f"   ‚Ä¢ Cr√©ditos restantes: {Credito.objects.count()}")
                self.stdout.write(f"   ‚Ä¢ Abonos restantes: {CreditoAbono.objects.count()}")
                
                clientes_incorrectos = Cliente.objects.exclude(credito=F('credito_maximo')).count()
                if clientes_incorrectos == 0:
                    self.stdout.write(f"   ‚úÖ Todos los clientes tienen su cr√©dito m√°ximo")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è  {clientes_incorrectos} clientes con cr√©dito incorrecto")
                
                self.stdout.write(self.style.SUCCESS("\nüéâ LIMPIEZA TOTAL COMPLETADA EXITOSAMENTE"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error durante la limpieza: {str(e)}"))
            self.stdout.write("üîÑ La transacci√≥n fue revertida autom√°ticamente")
            raise
    
    def crear_backup_completo(self, backup_path):
        """Crea un backup completo con metadatos adicionales"""
        
        try:
            backup_data = {
                'metadata': {
                    'timestamp': timezone.now().isoformat(),
                    'created_by': 'limpiar_deudas_completo',
                    'version': '2.0',
                    'description': 'Backup completo antes de limpieza de deudas'
                },
                'estadisticas': {
                    'clientes': Cliente.objects.count(),
                    'creditos': Credito.objects.count(),
                    'abonos': CreditoAbono.objects.count(),
                    'deuda_total': float(Credito.objects.filter(estado='Pendiente').aggregate(
                        total=Sum('monto_credito'))['total'] or 0)
                },
                'clientes': [],
                'creditos': [],
                'abonos': []
            }
            
            # Backup de clientes
            for cliente in Cliente.objects.all():
                backup_data['clientes'].append({
                    'id': cliente.id,
                    'cedula': cliente.cedula,
                    'nombre': cliente.nombre,
                    'telefono': cliente.telefono,
                    'zona_vive': cliente.zona_vive,
                    'credito': float(cliente.credito),
                    'credito_maximo': float(cliente.credito_maximo),
                    'credito_plazo': cliente.credito_plazo
                })
            
            # Backup de cr√©ditos
            for credito in Credito.objects.all():
                backup_data['creditos'].append({
                    'id': credito.id,
                    'pedido_id': credito.pedido_id,
                    'monto_credito': float(credito.monto_credito) if credito.monto_credito else None,
                    'estado': credito.estado,
                    'plazo_credito': credito.plazo_credito,
                    'fecha': credito.fecha.isoformat() if credito.fecha else None,
                    'fecha_vencimiento': credito.fecha_vencimiento.isoformat() if credito.fecha_vencimiento else None,
                    'cliente': credito.cliente,
                    'abonado': float(credito.abonado) if credito.abonado else None,
                    'cliente_id': credito.cliente_id
                })
            
            # Backup de abonos
            for abono in CreditoAbono.objects.all():
                backup_data['abonos'].append({
                    'id': abono.id,
                    'credito_id': abono.credito_id,
                    'monto': float(abono.monto) if abono.monto else None,
                    'fecha': abono.fecha.isoformat() if abono.fecha else None,
                    'metodo_pago': abono.metodo_pago,
                    'monto_neto': float(abono.monto_neto) if abono.monto_neto else None,
                    'denominaciones': abono.denominaciones,
                    'vuelto': abono.vuelto,
                    'cierre_caja_id': abono.cierre_caja.id if abono.cierre_caja else None
                })
            
            # Guardar backup
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            # Verificar que el archivo se cre√≥ correctamente
            if os.path.exists(backup_path):
                file_size = os.path.getsize(backup_path)
                self.stdout.write(
                    f"‚úÖ Backup creado: {backup_path} ({file_size} bytes)\n"
                    f"   üìÅ Contiene: {len(backup_data['clientes'])} clientes, "
                    f"{len(backup_data['creditos'])} cr√©ditos, {len(backup_data['abonos'])} abonos"
                )
            else:
                raise Exception("El archivo de backup no se cre√≥ correctamente")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error creando backup: {str(e)}"))
            raise 